#https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md
openapi: 3.0.3
info:
  title: ADETEM API
  version: 1.0.0
servers:
  - url: "{protocol}://{environment}:{port}/"
    variables:
      protocol:
        default: https
        enum:
          - http
          - https
      environment:
        default: localhost # Production server
        enum:
          - localhost # Production server
          - api.dev # Development server
          - api.staging # Staging server
      port:
        default: "3000"
      # version:
      #   default: ""
      #   enum:
      #     - ""
      #     - "v1/"
      # basePath:
      #   default: ""
      #   enum:
      #     - ""
      #     - "mobile_app/"
      #     - "ux/"
paths:

  ####################################
  #           ROUTES
  # https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#paths-object-example
  ####################################
  ######## MEASURES START ############
  /measures:
    x-exegesis-controller: mongoCrud
    get:
      x-exegesis-operationId: readMany
      x-exegesis-collectionName: Measure
      tags:
        - Measure
      responses:
        200:
          $ref: "#/components/responses/200"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/Measure"
        500:
          $ref: "#/components/responses/500"
    post:
      x-exegesis-operationId: create
      x-exegesis-collectionName: Measure
      tags:
        - Measure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Measure"
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
  /measure/{_id}:
    x-exegesis-controller: mongoCrud
    put:
      x-exegesis-operationId: update
      x-exegesis-collectionName: Measure
      tags:
        - Measure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Measure"
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
    get:
      x-exegesis-operationId: readOne
      x-exegesis-collectionName: Measure
      tags:
        - Measure
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
    delete:
      x-exegesis-operationId: remove
      x-exegesis-collectionName: Measure
      tags:
        - Measure
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
  ######## MEasure END ############
  ######## VARIABLE START ############
  /variables:
    x-exegesis-controller: mongoCrud
    get:
      x-exegesis-operationId: readMany
      x-exegesis-collectionName: Variable
      tags:
        - Variable
      responses:
        200:
          $ref: "#/components/responses/200"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/Variable"
        500:
          $ref: "#/components/responses/500"
    post:
      x-exegesis-operationId: create
      x-exegesis-collectionName: Variable
      tags:
        - Variable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Variable"
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
  /variable/{_id}:
    x-exegesis-controller: mongoCrud
    put:
      x-exegesis-operationId: update
      x-exegesis-collectionName: Variable
      tags:
        - Variable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Variable"
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
    get:
      x-exegesis-operationId: readOne
      x-exegesis-collectionName: Variable
      tags:
        - Variable
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
    delete:
      x-exegesis-operationId: remove
      x-exegesis-collectionName: Variable
      tags:
        - Variable
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
  ######## VARIABLE END ############


  ########### AUTH START ###############
  /refresh_token:
    x-exegesis-controller: authController
    post:
      deprecated: true
      x-exegesis-operationId: refreshToken
      tags:
        - auth
      security: []
      summary: Refresh JWT
      parameters:
        - in: header
          name: authorization
          example: 'Bearer sesdafesa4223dsfaes....'
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
  /login:
    x-exegesis-controller: authController
    post:
      x-exegesis-operationId: login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
            example:
              email: user@example.com
              password: example
      security: []
      summary: Return JWT token
      responses:
        200:
          $ref: "#/components/responses/200"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /sign_up:
    x-exegesis-controller: authController
    post:
      x-exegesis-operationId: singUp
      x-exegesis-collectionName: User
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                surname:
                  type: string
                email:
                  type: string
                password:
                  type: string
            example:
              name: Happy Developer
              surname: Developer
              email: my_funny@account.com
              password: hello
      responses:
        200:
          $ref: "#/components/responses/200"
        500:
          $ref: "#/components/responses/500"
########### AUTH END ###############

####################################
#           MODELS
# https://swagger.io/docs/specification/data-models/keywords/
####################################
components:
  schemas:
    User:
      type: object
      x-openapi-mongoose:
        schema-options:
            timestamps: true
      required:
        - email
        - password
      properties:
        name:
          type: string
          maxLength: 120
        surname:
          type: string
          maxLength: 120
        email:
          type: string
          format: email
          maxLength: 200
          uniqueItems: true
        password:
          description: Password received in plain text and stored on bycrypt hash
          example: holahola
          type: string
          format: password
          writeOnly: true
        passwordResetToken:
          type: integer
          description: A JS timestamp (epoch ms) representing the moment when this user\"s `passwordResetToken` will expire (or 0 if the user currently has no such token).
          example: 1502844074211
        lastSeenAt:
          type: string
          format: date
          default: current
          description: A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).
          example: 1502844074211
        emailStatus:
          description: The confirmation status of the user\"s email address.
          type: string
          enum: ["unconfirmed", "change-requested", "confirmed"]
          default: confirmed
        rol:
          description: The access request.
          type: string
          enum: ["admin", "user"]
          default: user
        lastIp:
          description: Last IP.
          maxLength: 20
          type: string
          example: 192.168.158.18
        refreshToken:
          description: Token with a largest expiration time to maintain sessions.
          type: string
    Variable:
      description: Sensor variables
      type: object
      properties:
        code:
          type: string
        symbol:
          type: string
        names:
          x-openapi-mongoose:
              type: Map
              of: string
          type: object
      example:
        code: TEMP
        names:
          en: Temperature
          es: Temperatura
        symbol: Jessica Smith
    Measure:
      description: measures
      type: object
      properties:
        user:
          type: string
        sensor:
          type: string
        day:
          type: string
          format : date
        variable:
          description: Object Id of variables
          type: string
        samples:
          x-openapi-mongoose:
            type: Map
            of: string
          type: object
      example:
        day: "2020-10-16"
        sensor: ADETEM-MD
        user: example@ee.com
        variable: 5f897ff75d6e2ebdcd425afa
        samples:
            1603047896 : 29.32
            1603047897 : 90.34
    ErrorModel:
      x-openapi-mongoose:
        exclude-schema: true
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
  ##################################
  #      RESPONSES
  # https://developer.mozilla.org/es/docs/Web/HTTP/Status
  ###############################3
  responses:
    200:
      description: "Ok"
    400:
      description: "Bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"
    401:
      description: "Not Authorized or session expired."
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
              - type: object
                properties:
                  token_error:
                    type: string
                    default: false or undefined
                    example: TokenExpiredError
                    description: (Optional parameter) When is set to TokenExpiredError indicate that the sessions has expired.
    403:
      description: "Not authorized or not active"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"
    404:
      description: "Not Found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"
    500:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"

  #########################
  #   SECURITY
  ###########################
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      description: Token value, if you not have use the default to test "
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

#security: []
security:
  - bearerAuth: [] # use the same name as above

# x-openapi-mongoose:
#   additional-properties:
#     user:
#      $ref: "#/definitions/User"
#     approved:
#      type: string
#       format: datetime
#     rejected:
#       type: string
#       format: datetime
#    exclude-schema: true // by default false
#   schema-options:
#     timestamps: true
