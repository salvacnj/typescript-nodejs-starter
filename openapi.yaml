openapi: 3.0.1
info:
  title: IOT API
  version: 1.0.0

servers:
  #- url: http://localhost/
  - url: http://{environment}:{port}/{basePath}{version}
    variables:
      environment:
        default: localhost # Production server
        enum:
          - localhost # Production server
          - api.dev # Development server
          - api.staging # Staging server
      port:
        default: "3000"
      version:
        default: ""
        enum:
          - ""
          - "v1/"
      basePath:
        default: ""
        enum:
          - ""
          - "mobile_app/"
          - "ux/"
# - url: https://staging.gigantic-server.com/v1
#   description: Staging server
#   variables:
#     port:
#       default: '3000'
#     basePath:
#       default: v1
# - url: https://api.gigantic-server.com/v1
#   description: Production server
#   variables:
#     port:
#       default: '3000'
#     basePath:
#       default: v1
paths:
  ####################################
  #           ROUTES
  ####################################
  ######## GREET START ############
  /greet:
    x-exegesis-controller: v1/greet/greetController
    get:
      x-exegesis-operationId: readMany
      tags:
        - Greet
      responses:
        200:
          $ref: "#/components/responses/200"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/greet"
        404:
          $ref: "#/components/responses/404"
    post:
      x-exegesis-operationId: create
      tags:
        - Greet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/greet"
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"
  /greet/{_id}:
    x-exegesis-controller: v1/greet/greetController
    put:
      x-exegesis-operationId: update
      tags:
        - Greet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/greet"
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"
    get:
      x-exegesis-operationId: readOne
      tags:
        - Greet
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"
    delete:
      summary: "Delete example"
      x-exegesis-operationId: remove
      tags:
        - Greet
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"

  ######## GREET END ############

  ######## USER START ############
  /user:
    x-exegesis-controller: v1/user/userController
    get:
      x-exegesis-operationId: readMany
      tags:
        - User
      responses:
        200:
          $ref: "#/components/responses/200"
          content:
            application/json:
            schema:
              $ref: "#/components/schemas/user"
        404:
          $ref: "#/components/responses/404"
    post:
      summary: "Create new user"
      x-exegesis-operationId: create
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"
  /user/{_id}:
    x-exegesis-controller: v1/user/userController
    put:
      summary: "Update example"
      x-exegesis-operationId: update
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"
    get:
      summary: "Find example"
      description: Returns example by Id
      x-exegesis-operationId: readOne
      tags:
        - User
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"
    delete:
      summary: "Delete example"
      x-exegesis-operationId: remove
      tags:
        - User
      parameters:
        - in: path
          name: _id
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"

  ######## USER END ############
  ########### AUTH START ###############

########### AUTH END ###############

####################################
#           MODELS
# https://swagger.io/docs/specification/data-models/keywords/
####################################
components:
  schemas:
    user:
      description: Users for API auth
      type: object
      required:
        - emailAddress
        - password
      properties:
        emailAddress:
          type: string
          format: email
          maxLength: 200
          uniqueItems: true
        password:
          description: base64-encoded characters, for example,
          example: U3dhZ2dlciByb2Nrcw==
          type: string
          writeOnly: true
          format: byte
    greet:
      description: A greeting for the user.
      type: object
      required:
        - message
      properties:
        message:
          type: string

    ####### ERRORS ################
    ErrorModel:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600

  ##################################
  #      RESPONSES
  # Based on: https://opensource.zalando.com/restful-api-guidelines/#http-requests
  ###############################3
  responses:
    200:
      description: "Ok"
    400:
      description: "Bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"
    404:
      description: "Not Found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorModel"

  #########################
  #   SECURITY
  ###########################
  securitySchemes:
    sessionKey:
      type: apiKey
      name: api_key
      in: header
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
    # basicAuth:
    #   description: A request with a username and password
    #   type: http
    #   scheme: basic
    # oauth:
    #   description: A request with an oauth token.
    #   type: oauth2
    #   flows:
    #     authorizationCode:
    #       authorizationUrl: https://api.exegesis.io/oauth/authorize
    #       tokenUrl: https://api.exegesis.io/oauth/token
    #       scopes:
    #         readOnly: "Read only scope."
    #         readWrite: "Read/write scope."
security:
  - bearerAuth: [] # use the same name as above
  - sessionKey: []
